# server.py ‚Äî Flask 3.x compatible (webhook + commands + web_app_data)
import os, json, logging, time
from datetime import datetime
from flask import Flask, request, jsonify
from flask_cors import CORS, cross_origin
import telebot
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton, WebAppInfo

# ---------- logging ----------
logging.basicConfig(level=logging.INFO)
log = logging.getLogger("directswap")

# ---------- ENV ----------
BOT_TOKEN = os.getenv("BOT_TOKEN", "").strip()
ADMIN_BOT_TOKEN = os.getenv("ADMIN_BOT_TOKEN", "").strip()
ADMIN_ID = int(os.getenv("ADMIN_ID", "0") or 0)
ADMIN_TARGET_CHAT_ID = int(os.getenv("ADMIN_TARGET_CHAT_ID", "0") or 0)
WEBAPP_URL = os.getenv("WEBAPP_URL", "").strip()
WEBHOOK_BASE = os.getenv("WEBHOOK_BASE", "").strip()
WEBHOOK_SECRET = os.getenv("WEBHOOK_SECRET", "ds12345").strip()
HOST = os.getenv("HOST", "0.0.0.0")
PORT = int(os.getenv("PORT", "10000"))

if not BOT_TOKEN or not ADMIN_BOT_TOKEN or not WEBHOOK_BASE:
    log.error("Missing required ENV (BOT_TOKEN / ADMIN_BOT_TOKEN / WEBHOOK_BASE)")

bot = telebot.TeleBot(BOT_TOKEN, parse_mode="HTML")
admin_bot = telebot.TeleBot(ADMIN_BOT_TOKEN, parse_mode="HTML")

# ---------- Flask ----------
app = Flask(__name__)
CORS(app, origins=[
    "https://sunibaktsalder.github.io",
    "https://telegram.org", 
    "https://web.telegram.org"
])

# ---------- –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ ----------
request_counter = 0
user_sessions = {}  # –•—Ä–∞–Ω–∏–º chat_id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
admin_messages = {}  # –•—Ä–∞–Ω–∏–º message_id –∞–¥–º–∏–Ω-—Å–æ–æ–±—â–µ–Ω–∏–π

# ---------- helpers ----------
def generate_request_id():
    global request_counter
    request_counter += 1
    return f"{request_counter:03d}"

def get_network_icon(network):
    icons = {
        "TRC20": "‚è©",
        "ERC20": "‚ìÇÔ∏è", 
        "TON": "üíé"
    }
    return icons.get(network, "üåê")

def make_open_webapp_kb():
    kb = InlineKeyboardMarkup()
    kb.add(InlineKeyboardButton("üöÄ –û—Ç–∫—Ä—ã—Ç—å DirectSwap", web_app=WebAppInfo(url=WEBAPP_URL)))
    return kb

def fmt_money(v):
    try:
        return f"{float(v):,.2f}".replace(",", " ")
    except Exception:
        return str(v)

# ---------- Flask Routes ----------
@app.get("/")
def root_ok():
    return "DirectSwap backend OK", 200

@app.get("/healthz")
def healthz():
    return "ok", 200

@app.get("/init")
def init():
    """–†—É—á–Ω–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤–µ–±—Ö—É–∫–∞."""
    try:
        url = f"{WEBHOOK_BASE}/webhook/{WEBHOOK_SECRET}"
        bot.remove_webhook()
        bot.set_webhook(url=url)
        me = bot.get_me()
        log.info("Webhook (manual) set to %s for @%s", url, me.username)
        return f"Webhook set to {url} for @{me.username}", 200
    except Exception as e:
        log.exception("init/set_webhook failed: %r", e)
        return f"error: {e}", 500

# ---------- –†–µ–∑–µ—Ä–≤–Ω—ã–π —ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –∑–∞—è–≤–æ–∫ ----------
@app.post("/collect")
@cross_origin()
def collect():
    """–†–µ–∑–µ—Ä–≤: –ø—Ä–∏—ë–º –∑–∞—è–≤–∫–∏ –æ–±—ã—á–Ω—ã–º HTTP –∏–∑ –±—Ä–∞—É–∑–µ—Ä–∞."""
    try:
        p = request.get_json(force=True) or {}
        log.info("COLLECT received: %s", p)
    except Exception as e:
        log.error("COLLECT error: %r", e)
        p = {}

    if not isinstance(p, dict):
        p = {"raw": str(p)}
    
    request_type = p.get("type", "exchange_request")
    request_id = generate_request_id()
    current_time = datetime.now().strftime("%H:%M %d.%m.%Y")
    
    if request_type == "support_request":
        support_topic = p.get("topic", "")
        support_contact = p.get("contact", "")
        support_message = p.get("message", "")
        username = p.get("username", "")
        
        text = (
            f"üÜò *–ó–ê–ü–†–û–° –ü–û–î–î–ï–†–ñ–ö–ò* #{request_id}\n"
            f"‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n"
            f"‚ïë üë§ *–ö–ª–∏–µ–Ω—Ç:* {username if username else '‚Äî'}\n"
            f"‚ïë üìû *–ö–æ–Ω—Ç–∞–∫—Ç:* {support_contact if support_contact else '‚Äî'}\n"
            f"‚ïë üïí *–í—Ä–µ–º—è:* {current_time}\n"
            f"‚ïë ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n"
            f"‚ïë üìù *–¢–µ–º–∞:* {support_topic}\n"
            f"‚ïë üí¨ *–°–æ–æ–±—â–µ–Ω–∏–µ:*\n"
            f"‚ïë {support_message}\n"
            f"‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê"
        )
        
    else:
        calc = p.get("calc") or {}
        network = p.get("network", "?")
        network_icon = get_network_icon(network)
        
        text = (
            f"üéØ *–ù–û–í–ê–Ø –ó–ê–Ø–í–ö–ê –ù–ê –û–ë–ú–ï–ù* #{request_id}\n"
            f"‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n"
            f"‚ïë üë§ *–ö–ª–∏–µ–Ω—Ç:* {p.get('username', '‚Äî')}\n"
            f"‚ïë {network_icon} *–°–µ—Ç—å:* {network}\n"
            f"‚ïë üí∞ *–°—É–º–º–∞:* {p.get('amount','?')} USDT\n"
            f"‚ïë üìà *–ö—É—Ä—Å:* {p.get('usd_rub','?')} ‚ÇΩ\n"
            f"‚ïë üïí *–í—Ä–µ–º—è:* {current_time}\n"
            f"‚ïë ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n"
            f"‚ïë üíµ *–ö –≤—ã–ø–ª–∞—Ç–µ:* {calc.get('result_rub','?')} ‚ÇΩ\n"
            f"‚ïë üìä *–ö–æ–º–∏—Å—Å–∏—è:* {calc.get('commission_rub','?')} ‚ÇΩ\n"
            f"‚ïë üí≥ *–ö–∞—Ä—Ç–∞:* `{p.get('card_number','?')}`\n"
            f"‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê"
        )

    try:
        keyboard = InlineKeyboardMarkup()
        
        username = p.get('username', '')
        if username and username.startswith('@'):
            keyboard.add(InlineKeyboardButton(
                "üí¨ –ù–∞–ø–∏—Å–∞—Ç—å –∫–ª–∏–µ–Ω—Ç—É", 
                url=f"https://t.me/{username[1:]}"
            ))
        
        if request_type == "exchange_request":
            keyboard.row(
                InlineKeyboardButton("‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ", callback_data=f"processed_{request_id}"),
                InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"rejected_{request_id}")
            )
        else:
            keyboard.add(InlineKeyboardButton("‚úÖ –û—Ç–≤–µ—Ç–∏—Ç—å", callback_data=f"support_{request_id}"))

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–µ—Ä–µ–∑ –∞–¥–º–∏–Ω-–±–æ—Ç–∞
        sent_message = admin_bot.send_message(
            ADMIN_TARGET_CHAT_ID, 
            text, 
            parse_mode="Markdown",
            reply_markup=keyboard
        )
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è callback
        admin_messages[request_id] = sent_message.message_id
        
        log.info("ADMIN DELIVERED (HTTP reserve) - ID: %s", request_id)
        return {"ok": True, "message": "–ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞"}
    except Exception as e:
        log.error("ADMIN reserve send failed: %r", e)
        return {"ok": False, "error": str(e)}, 500

# --- WEBHOOK ---
@app.post(f"/webhook/{WEBHOOK_SECRET}")
def webhook():
    upd = request.get_json(silent=True) or {}
    log.info("WEBHOOK JSON[0:300]=%r", str(upd)[:300])

    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —á–µ—Ä–µ–∑ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –±–æ—Ç–∞ (–≤–∫–ª—é—á–∞—è callback)
    bot.process_new_updates([telebot.types.Update.de_json(upd)])
    return jsonify(ok=True)

# ---------- –û–±—Ä–∞–±–æ—Ç–∫–∞ callback query ----------
@bot.callback_query_handler(func=lambda call: True)
def handle_callback(call):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏."""
    try:
        data = call.data
        user_chat_id = call.from_user.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –∞–¥–º–∏–Ω (–ø–æ ID)
        if user_chat_id != ADMIN_ID and user_chat_id != ADMIN_TARGET_CHAT_ID:
            bot.answer_callback_query(call.id, text="‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
            return
        
        log.info("Callback received: %s from user: %s", data, user_chat_id)
        
        if data.startswith("rejected_"):
            request_id = data.replace("rejected_", "")
            client_chat_id = user_sessions.get(request_id)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∞–¥–º–∏–Ω-—á–∞—Ç–µ
            try:
                original_text = call.message.text
                new_text = original_text + f"\n\n‚ùå *–û–¢–ö–õ–û–ù–ï–ù–û* –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"
                
                bot.edit_message_text(
                    chat_id=call.message.chat.id,
                    message_id=call.message.message_id,
                    text=new_text,
                    parse_mode="Markdown",
                    reply_markup=None
                )
                log.info("–ó–∞—è–≤–∫–∞ %s –æ—Ç–º–µ—á–µ–Ω–∞ –∫–∞–∫ –æ—Ç–∫–ª–æ–Ω–µ–Ω–Ω–∞—è", request_id)
            except Exception as e:
                log.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: %r", e)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç—É
            if client_chat_id:
                try:
                    rejection_text = (
                        "‚ùå *–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–µ –±—ã–ª–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞*\n\n"
                        "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –º—ã –Ω–µ —Å–º–æ–≥–ª–∏ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –≤–∞—à –∑–∞–ø—Ä–æ—Å. "
                        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É –∏–ª–∏ —Å–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—É—é –∑–∞—è–≤–∫—É.\n\n"
                        "üí¨ *–ü–æ –≤–æ–ø—Ä–æ—Å–∞–º:* @directswap_support"
                    )
                    bot.send_message(client_chat_id, rejection_text, parse_mode="Markdown")
                    log.info("–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é %s", client_chat_id)
                except Exception as e:
                    log.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç—É: %r", e)
            
            bot.answer_callback_query(call.id, text="‚úÖ –ó–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞")
            
        elif data.startswith("processed_"):
            request_id = data.replace("processed_", "")
            client_chat_id = user_sessions.get(request_id)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∞–¥–º–∏–Ω-—á–∞—Ç–µ
            try:
                original_text = call.message.text
                new_text = original_text + f"\n\n‚úÖ *–û–ë–†–ê–ë–û–¢–ê–ù–û* –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"
                
                bot.edit_message_text(
                    chat_id=call.message.chat.id,
                    message_id=call.message.message_id,
                    text=new_text,
                    parse_mode="Markdown",
                    reply_markup=None
                )
                log.info("–ó–∞—è–≤–∫–∞ %s –æ—Ç–º–µ—á–µ–Ω–∞ –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è", request_id)
            except Exception as e:
                log.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: %r", e)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç—É
            if client_chat_id:
                try:
                    processed_text = (
                        "‚úÖ *–í–∞—à–∞ –∑–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞!*\n\n"
                        "–°—Ä–µ–¥—Å—Ç–≤–∞ –±—É–¥—É—Ç –∑–∞—á–∏—Å–ª–µ–Ω—ã –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.\n"
                        "–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –≤—ã–±—Ä–∞–ª–∏ –Ω–∞—à —Å–µ—Ä–≤–∏—Å! üéâ\n\n"
                        "üí¨ *–ü–æ –≤–æ–ø—Ä–æ—Å–∞–º:* @directswap_support"
                    )
                    bot.send_message(client_chat_id, processed_text, parse_mode="Markdown")
                    log.info("–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é %s", client_chat_id)
                except Exception as e:
                    log.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç—É: %r", e)
            
            bot.answer_callback_query(call.id, text="‚úÖ –ó–∞—è–≤–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞")
                
        elif data.startswith("support_"):
            request_id = data.replace("support_", "")
            bot.answer_callback_query(
                call.id,
                text=f"–û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ –∑–∞—è–≤–∫—É –ø–æ–¥–¥–µ—Ä–∂–∫–∏ #{request_id}",
                show_alert=False
            )
            
    except Exception as e:
        log.exception("Callback failed: %r", e)
        try:
            bot.answer_callback_query(call.id, text="‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏")
        except:
            pass

# ---------- –û–±—Ä–∞–±–æ—Ç–∫–∞ web_app_data ----------
@bot.message_handler(content_types=["web_app_data"])
def handle_web_app_data(message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞—è–≤–æ–∫ –∏–∑ –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è."""
    try:
        raw = message.web_app_data.data
        log.info("WEBAPP RAW=%s", raw)
        try:
            data = json.loads(raw)
        except Exception:
            data = {"raw": raw}

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º chat_id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_chat_id = message.chat.id
        request_type = data.get("type", "exchange_request") if isinstance(data, dict) else "exchange_request"
        request_id = generate_request_id()
        current_time = datetime.now().strftime("%H:%M %d.%m.%Y")
        
        user_sessions[request_id] = user_chat_id
        log.info("Saved user session: %s -> %s", request_id, user_chat_id)
        
        if request_type == "support_request" and isinstance(data, dict):
            support_topic = data.get("topic", "")
            support_contact = data.get("contact", "")
            support_message = data.get("message", "")
            username = data.get("username", "")
            
            text = (
                f"üÜò *–ó–ê–ü–†–û–° –ü–û–î–î–ï–†–ñ–ö–ò* #{request_id}\n"
                f"‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n"
                f"‚ïë üë§ *–ö–ª–∏–µ–Ω—Ç:* {username if username else '‚Äî'}\n"
                f"‚ïë üìû *–ö–æ–Ω—Ç–∞–∫—Ç:* {support_contact if support_contact else '‚Äî'}\n"
                f"‚ïë üïí *–í—Ä–µ–º—è:* {current_time}\n"
                f"‚ïë ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n"
                f"‚ïë üìù *–¢–µ–º–∞:* {support_topic}\n"
                f"‚ïë üí¨ *–°–æ–æ–±—â–µ–Ω–∏–µ:*\n"
                f"‚ïë {support_message}\n"
                f"‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê"
            )
            
            keyboard = InlineKeyboardMarkup()
            if username and username.startswith('@'):
                keyboard.add(InlineKeyboardButton(
                    "üí¨ –ù–∞–ø–∏—Å–∞—Ç—å –∫–ª–∏–µ–Ω—Ç—É", 
                    url=f"https://t.me/{username[1:]}"
                ))
            keyboard.add(InlineKeyboardButton("‚úÖ –û—Ç–≤–µ—Ç–∏—Ç—å", callback_data=f"support_{request_id}"))
            
            admin_bot.send_message(
                ADMIN_TARGET_CHAT_ID,
                text,
                parse_mode="Markdown",
                reply_markup=keyboard
            )
            
            bot.send_message(user_chat_id, "‚úÖ –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É. –ú—ã –æ—Ç–≤–µ—Ç–∏–º –≤–∞–º –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.")
            
        else:
            p = data if isinstance(data, dict) else {"raw": str(data)}
            calc = p.get("calc") or {}
            network = p.get("network", "-")
            network_icon = get_network_icon(network)
            
            amt = p.get("amount", "-")
            rate = p.get("usd_rub", "-")
            res_rub = fmt_money(calc.get("result_rub", "-"))
            fee_rub = fmt_money(calc.get("commission_rub", "-"))
            card = p.get("card_number", "‚Äî")
            uname = p.get("username", "") or ""
            if uname and not uname.startswith("@"):
                uname = "@" + uname

            client = uname if uname else f"id:{message.from_user.id}"
            
            text = (
                f"üéØ *–ù–û–í–ê–Ø –ó–ê–Ø–í–ö–ê –ù–ê –û–ë–ú–ï–ù* #{request_id}\n"
                f"‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n"
                f"‚ïë üë§ *–ö–ª–∏–µ–Ω—Ç:* {client}\n"
                f"‚ïë {network_icon} *–°–µ—Ç—å:* {network}\n"
                f"‚ïë üí∞ *–°—É–º–º–∞:* {amt} USDT\n"
                f"‚ïë üìà *–ö—É—Ä—Å:* {rate} ‚ÇΩ\n"
                f"‚ïë üïí *–í—Ä–µ–º—è:* {current_time}\n"
                f"‚ïë ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n"
                f"‚ïë üíµ *–ö –≤—ã–ø–ª–∞—Ç–µ:* {res_rub} ‚ÇΩ\n"
                f"‚ïë üìä *–ö–æ–º–∏—Å—Å–∏—è:* {fee_rub} ‚ÇΩ\n"
                f"‚ïë üí≥ *–ö–∞—Ä—Ç–∞:* `{card}`\n"
                f"‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê"
            )

            keyboard = InlineKeyboardMarkup()
            
            if uname and uname.startswith('@'):
                keyboard.add(InlineKeyboardButton(
                    "üí¨ –ù–∞–ø–∏—Å–∞—Ç—å –∫–ª–∏–µ–Ω—Ç—É", 
                    url=f"https://t.me/{uname[1:]}"
                ))
            
            keyboard.row(
                InlineKeyboardButton("‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ", callback_data=f"processed_{request_id}"),
                InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"rejected_{request_id}")
            )

            admin_bot.send_message(
                ADMIN_TARGET_CHAT_ID,
                text,
                parse_mode="Markdown",
                reply_markup=keyboard
            )
            
            bot.send_message(user_chat_id, "‚úÖ –ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞. –ú—ã —Å–∫–æ—Ä–æ —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏.")
            
    except Exception as e:
        log.exception("handle_web_app_data failed: %r", e)

# ---------- commands ----------
@bot.message_handler(commands=["start"])
def cmd_start(m):
    welcome_text = (
        "üéâ *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ DirectSwap!*\n\n"
        "üí± *–û–±–º–µ–Ω—è–π—Ç–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É –ø–æ –≤—ã–≥–æ–¥–Ω–æ–º—É –∫—É—Ä—Å—É:*\n"
        "‚Ä¢ USDT ‚Üí RUB\n" 
        "‚Ä¢ –ë—ã—Å—Ç—Ä–æ –∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ\n"
        "‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ 24/7\n\n"
        "üöÄ *–ù–∞—á–Ω–∏—Ç–µ –æ–±–º–µ–Ω - –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ!*"
    )
    
    bot.send_message(
        m.chat.id,
        welcome_text,
        parse_mode="Markdown",
        reply_markup=make_open_webapp_kb()
    )

@bot.message_handler(commands=["debug"])
def cmd_debug(m):
    text = (
        "DEBUG\n"
        f"BOT_ID: {m.chat.id}\n"
        f"ADMIN_TARGET_CHAT_ID: {ADMIN_TARGET_CHAT_ID}\n"
        f"ADMIN_ID: {ADMIN_ID}\n"
        f"WEBAPP_URL: {WEBAPP_URL}\n"
    )
    bot.send_message(m.chat.id, text)

# ---------- webhook setup ----------
def _ensure_webhook_on_import():
    try:
        url = f"{WEBHOOK_BASE}/webhook/{WEBHOOK_SECRET}"
        bot.remove_webhook()
        bot.set_webhook(url=url)
        me = bot.get_me()
        log.info("Webhook (import) set to %s for @%s", url, me.username)
    except Exception as e:
        log.exception("import set_webhook failed: %r", e)

_ensure_webhook_on_import()

if __name__ == "__main__":
    app.run(host=HOST, port=PORT)
